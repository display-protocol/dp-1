---
description: 
globs: 
alwaysApply: false
---
---
description: TypeScript coding standards and file organization for DP-1 protocol
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: false
---

# TypeScript Coding Standards

## Code Quality Standards

### TypeScript Configuration
- Use strict TypeScript configuration
- Define interfaces for all data structures
- Use proper type annotations and avoid `any`
- Implement proper error boundaries
- Use async/await over Promise chains

### Type Definitions
```typescript
// Define clear interfaces for all protocol structures
interface PlaylistItem {
  id: string;
  title: string;
  source: string;
  duration: number;
  license: 'open' | 'token' | 'subscription';
  display?: DisplayPrefs;
  repro?: ReproBlock;
  provenance?: ProvenanceBlock;
}

interface DisplayPrefs {
  scaling: 'fit' | 'fill' | 'stretch' | 'auto';
  margin: number | string;
  background: string;
  autoplay: boolean;
  loop: boolean;
}
```

### Error Handling
```typescript
// Use proper error types
class DP1Error extends Error {
  constructor(
    public code: 'playlistInvalid' | 'sigInvalid' | 'licenseDenied' | 'reproMismatch' | 'sourceUnreachable',
    message: string,
    public details?: Record<string, any>
  ) {
    super(message);
    this.name = 'DP1Error';
  }
}
```

## File Organization

### Directory Structure
```
prototype/
├── api/           # REST/GraphQL endpoints
├── workers/       # Cloudflare Workers
├── schemas/       # JSON Schema definitions
├── types/         # TypeScript type definitions
├── utils/         # Shared utilities
└── tests/         # Test files
```

### Naming Conventions
- **Files**: kebab-case (`playlist-manager.ts`)
- **Variables/functions**: camelCase (`playlistItems`)
- **Constants**: UPPER_SNAKE_CASE (`DP_VERSION`)  
- **Types/Interfaces**: PascalCase (`PlaylistItem`)
- **Classes**: PascalCase (`PlaylistManager`)

### Import Organization
```typescript
// Group imports: Node.js built-ins, external packages, internal modules
import { crypto } from 'node:crypto';
import { OpenAI } from 'openai';
import { PlaylistItem } from '../types/dp1-types';
import { validatePlaylist } from '../utils/validation';
```

### Documentation Standards
- Use JSDoc comments for all public APIs
- Include examples in complex function documentation
- Document all interface properties
- Explain business logic and protocol compliance

### JSON Handling Best Practices
- Use JSON Schema 2020-12 for validation
- Implement canonical JSON serialization (UTF-8, LF terminators)
- Handle large JSON files with streaming where appropriate
- Always validate JSON against schemas before processing

### Async Patterns
```typescript
// Prefer async/await over Promise chains
async function processPlaylist(playlist: PlaylistItem): Promise<ProcessedPlaylist> {
  try {
    const validated = await validatePlaylist(playlist);
    const signed = await signPlaylist(validated);
    return await storePlaylist(signed);
  } catch (error) {
    throw new DP1Error('playlistInvalid', 'Failed to process playlist', { error });
  }
}
```

@prototype/types/index.ts
@prototype/utils/type-guards.ts
