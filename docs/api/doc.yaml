openapi: 3.1.0
info:
  title: DP-1 Feed Operator API
  version: 0.4.0-draft
  description: |
    REST interface for creating, updating, and retrieving DP-1 playlists and
    playlist-groups (exhibitions) with **multi-chain wallet signatures**.
    
    * **Writes** (`POST`, `PUT`) MUST include an `X-Sig` header that contains a
      Base64URL-encoded **Signature** JSON object.  
    * The server verifies that signature, extracts the wallet **address**,
      derives `creator`, timestamps `created`, and persists the resource.  
    * The persisted object is returned to the client and later to players; it
      includes the same Signature so that any player knows **how to verify**.

servers:
  - url: https://api.feed.feralfile.com

tags:
  - name: Playlists
    description: CRUD for DP-1 playlists
  - name: Playlist-Groups
    description: CRUD for curator-authored collections (exhibitions)

##########################################################################
# 1 · SECURITY SCHEME — multi-chain wallet signature in a single header
##########################################################################
components:
  securitySchemes:
    SignatureAuth:
      type: apiKey
      in: header
      name: X-Sig
      description: |
        Base64URL-encoded **Signature** JSON.  Example (pretty-printed):
        ```json
        {
          "chain"       : "tezos",
          "scheme"      : "tz_sign_payload",
          "address"     : "tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb",
          "sig"         : "edsigtr…",
          "payloadHash" : "0x7347…",
          "signedAt"    : "2025-06-20T07:30:25Z",
          "version"     : 2,
          "prevHash"    : "0x28f3…",
          "nonce"       : 123,
          "expires"     : 1718870000
        }
        ```

##########################################################################
# 2 · SCHEMAS
##########################################################################
  schemas:

    ####################################################################
    # 2.1 Signature  — universal author-signature envelope
    ####################################################################
    Signature:
      type: object
      required: [chain, scheme, address, sig, payloadHash, signedAt]
      properties:
        chain:
          type: string
          enum: [evm, tezos, solana, cosmos, polkadot, other]
          description: Chain family of the signing key.
        scheme:
          type: string
          description: Wallet-signature scheme (e.g. eip712, tz_sign_payload).
          pattern: '^[a-zA-Z0-9]+$'
          maxLength: 16
        address:
          type: string
          description: Wallet or account address derived from the signature.
          pattern: '^[a-zA-Z0-9]+$'
          maxLength: 128
        pubKey:
          type: string
          description: Raw public key (where address ≠ key, e.g. Solana).
          pattern: '^[a-zA-Z0-9+/=._-]+$'
          maxLength: 256
        sig:
          type: string
          description: Signature bytes (hex, base58-check, etc. per scheme).
          pattern: '^[a-zA-Z0-9+/=._-]+$'
          maxLength: 256
        payloadHash:
          type: string
          pattern: '^0x[a-fA-F0-9]{64}$'
          description: SHA-256 of the canonicalised JSON payload.
        signedAt:
          type: string
          format: date-time
        version:
          type: integer
          format: unsignedInt
          minimum: 1
          maximum: 4294967295
          description: Monotonic playlist/playlist-group revision.
        prevHash:
          type: string
          description: SHA-256 of the previous persisted revision (0 = first).
          pattern: '^0x[a-fA-F0-9]{64}$'
        nonce:
          type: integer
          description: Wallet-side replay guard.
          format: unsignedInt
          minimum: 1
          maximum: 4294967295
        expires:
          type: integer
          format: unsignedInt
          minimum: 0
          maximum: 4294967295
          description: UNIX-seconds TTL (0 = never).
      additionalProperties: false

    ####################################################################
    # 2.2 DisplayPrefs — ALL OPTIONAL
    ####################################################################
    DisplayPrefs:
      type: object
      properties:
        scaling:
          type: string
          enum: [fit, fill]
          description: fit → letter/pillar-box, fill → crop-to-viewport.
        margin:
          type: [number, string]
          description: Pixels (number) or %/vw/vh string.
          pattern: '^[0-9]+(\.[0-9]+)?(px|%|vw|vh)$'
          maxLength: 16
          minimum: 0.0
          format: float
        background:
          type: string
          description: Hex colour (`#000000`) or `"transparent"`.
          pattern: '^(#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})|transparent)$'
          maxLength: 16
        autoplay: { type: boolean }
        loop:     { type: boolean }
        interaction:
          type: object
          properties:
            keyboard:
              type: array
              maxItems: 108
              items: { type: string, maxLength: 16, pattern: '^[a-zA-Z0-9]+$' }
              description: Keyboard shortcuts.
            mouse:
              type: object
              description: Mouse interactions.
              properties:
                clickable:  { type: boolean }
                scrollable: { type: boolean }
                draggable:  { type: boolean }
                hoverable:  { type: boolean }
              additionalProperties: false
          additionalProperties: false
        userOverrides:
          type: object
          description: User-defined overrides.
          additionalProperties: { type: boolean }
      additionalProperties: false

    ####################################################################
    # 2.3 Repro — seed OPTIONAL, other keys REQUIRED
    ####################################################################
    Repro:
      type: object
      required: [engineVersion, assetsSHA256, frameHash]
      properties:
        engineVersion:
          type: object
          description: Browser/renderer engine versions (e.g. Chromium).
        assetsSHA256:
          type: array
          items: { type: string, maxLength: 128, pattern: '^0x[a-fA-F0-9]+$' }
          maxItems: 1024
          description: Hashes of every external asset.
        frameHash:
          type: object
          description: SHA-256 and/or perceptual hash of first frame.
        seed:
          type: string
          description: Optional deterministic PRNG seed.
          pattern: '^0x[a-fA-F0-9]+$'
          maxLength: 512
      additionalProperties: false

    ####################################################################
    # 2.4 Provenance — some keys OPTIONAL
    ####################################################################
    Provenance:
      type: object
      required: [type, chain, seriesId]
      properties:
        type:
          type: string
          enum: [seriesRegistry, onChainURI, offChainURI]
          description: Type of provenance.
        chain:
          type: string
          description: Chain of the provenance.
          pattern: '^[a-zA-Z0-9]+$'
          maxLength: 16
        seriesId:
          type: string
          description: Series ID of the provenance.
          pattern: '^[a-zA-Z0-9-_]+$'
          maxLength: 64
        tokenId:
          type: string
          description: Token ID of the provenance.
          pattern: '^[0-9]+$'
          maxLength: 64
        uri:
          type: string
          description: URI of the provenance.
          pattern: '^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$'
          maxLength: 1024
        dependencies:
          type: array
          maxItems: 1024
          description: Dependencies of the provenance.
          items:
            type: object
            properties:
              chain:
                type: string
                description: Chain of the dependency.
                pattern: '^[a-zA-Z0-9]+$'
                maxLength: 16
              uri:
                type: string
                description: URI of the dependency.
                pattern: '^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$'
                maxLength: 1024
            additionalProperties: false
          additionalProperties: false
      additionalProperties: false

    ####################################################################
    # 2.5 PlaylistItem — required + every optional field enumerated
    ####################################################################
    PlaylistItem:
      type: object
      required: [id, source, duration, license]
      properties:
        id:
          type: string
          description: ID of the playlist item.
          pattern: '^[a-zA-Z0-9-_]+$'
          maxLength: 32
        title:
          type: string
          description: Title of the playlist item.
          pattern: '^[a-zA-Z0-9\s.,;:!?\-_()"\''/@#&*+=|\\~`<>\[\]{}]*$'
          maxLength: 1024
        source:
          type: string
          description: Source of the playlist item.
          pattern: '^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$' 
          maxLength: 1024
        duration:
          type: number
          description: Duration of the playlist item.
          format: unsignedInt
          minimum: 1
          maximum: 4294967295
        license:
          type: string
          enum: [open, token, subscription]
          description: License of the playlist item.

        # Optional enrichment
        ref:
          type: string
          description: External manifest URL.
          pattern: '^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$'
          maxLength: 1024
        override:
          type: object
          description: Delta vs. `ref`.
        display:
          $ref: '#/components/schemas/DisplayPrefs'
        repro:
          $ref: '#/components/schemas/Repro'
        provenance:
          $ref: '#/components/schemas/Provenance'
        description:
          type: string
          description: Description of the playlist item.
          pattern: '^[a-zA-Z0-9\s.,;:!?\-_()"''\/\[\]{}@#$%&*+=|\\~`<>]*$'
          maxLength: 4096
        tags:
          type: array
          maxItems: 1024
          description: Tags of the playlist item.
          items:
            type: string
            description: Tag of the playlist item.
            pattern: '^[a-zA-Z0-9-_]+$'
            maxLength: 32
          additionalProperties: false
      additionalProperties: false

    ####################################################################
    # 2.6 Playlist — creator & signature REQUIRED, creator/created readOnly
    ####################################################################
    Playlist:
      type: object
      required: [dpVersion, id, creator, created, items, signature]
      properties:
        dpVersion:
          type: string
          description: Version of the DP-1 specification.
          pattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
          maxLength: 16
        id:
          type: string
          description: ID of the playlist.
          pattern: '^[a-zA-Z0-9-_]+$'
          readOnly: true
          maxLength: 32
        creator:
          type: string
          readOnly: true
          pattern: '^[a-zA-Z0-9]+$'
          maxLength: 128
          description: Wallet address extracted from `signature.address`.
        created:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of the playlist creation.
        defaults:
          type: object
          description: Default values for playlist items.
          properties:
            duration:
              type: number
              minimum: 1
              maximum: 4294967295
              format: unsignedInt
              description: Duration of the playlist item.
            license:
              type: string
              enum: [open, token, subscription]
              description: License of the playlist item.
          additionalProperties: false
        items:
          type: array
          minItems: 1
          maxItems: 1024
          description: Items in the playlist.
          items:
            $ref: '#/components/schemas/PlaylistItem'
        signature:
          type: string
          description: Signature of the playlist.
          pattern: '^[a-zA-Z0-9+/=._-]+$'
          maxLength: 256

    ####################################################################
    # 2.7 PlaylistGroup — creator & signature REQUIRED
    ####################################################################
    PlaylistGroup:
      type: object
      required: [id, title, curator, creator, created, playlists, signature]
      properties:
        id:
          type: string
          description: ID of the playlist group.
          pattern: '^[a-zA-Z0-9-_]+$'
          readOnly: true
          maxLength: 32
        title:
          type: string
          description: Title of the playlist group.
          pattern: '^[a-zA-Z0-9\s.,;:!?\-_()"\''/@#&*+=|\\~`<>\[\]{}]*$'
          maxLength: 1024
        curator:
          type: string
          description: Curator of the playlist group.
          pattern: '^[a-zA-Z0-9\s.,;:!?\-_()"\''/@#&*+=|\\~`<>\[\]{}]*$'
          maxLength: 128
        creator:
          type: string
          readOnly: true
          pattern: '^[a-zA-Z0-9]+$'
          maxLength: 128
          description: Wallet address extracted from `signature.address`.
        summary:
          type: string
          description: Summary of the playlist group.
          pattern: '^[a-zA-Z0-9\s.,;:!?\-_()"\''/@#&*+=|\\~`<>\[\]{}]*$'
          maxLength: 4096
        playlists:
          type: array
          minItems: 1
          maxItems: 1024
          description: Playlists in the playlist group.
          items:
            type: string
            description: ID of the playlist.
            pattern: '^[a-zA-Z0-9-_]+$'
            maxLength: 32
        created:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of the playlist group creation.
        coverImage:
          type: string
          description: Cover image of the playlist group.
          pattern: '^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$' 
          maxLength: 1024
        signature:
          type: string
          description: Signature of the playlist group.
          pattern: '^[a-zA-Z0-9+/=._-]+$'
          maxLength: 256

    ####################################################################
    # 2.8 PublishEnvelope — request wrapper
    ####################################################################
    PublishEnvelope:
      type: object
      required: [payload]
      description: |
        The request **body** for POST/PUT must wrap the resource in
        `payload`.  The wallet Signature is sent **in the X-Sig header**
        (not inside this JSON).
      properties:
        payload:
          oneOf:
            - $ref: '#/components/schemas/Playlist'
            - $ref: '#/components/schemas/PlaylistGroup'
      additionalProperties: false

    ####################################################################
    # 2.9 Error response
    ####################################################################
    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          description: Error code.
          pattern: '^[a-zA-Z0-9_]+$'
          maxLength: 32
        message:
          type: string
          description: Error message.
          pattern: '^[a-zA-Z0-9\s.,;:!?\-_()"''\/\[\]{}@#$%&*+=|\\~`<>]*$'
          maxLength: 1024
      additionalProperties: false

##########################################################################
# 3 · GLOBAL RESPONSES
##########################################################################
  responses:
    SigMismatch:
      description: Wallet signature invalid or not authorised
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

##########################################################################
# 4 · PATHS
##########################################################################
paths:

  #-------------------------#
  # 4.1  PLAYLIST ENDPOINTS #
  #-------------------------#
  /playlists:
    post:
      tags: [Playlists]
      summary: Create a new playlist (revision 1)
      security: [{ SignatureAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PublishEnvelope' }
      responses:
        '201':
          description: Playlist persisted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Playlist' }
        '401':
          $ref: '#/components/responses/SigMismatch'
        '403':
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '406':
          description: Unsupported media type
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /playlists/{playlistId}:
    parameters:
      - name: playlistId
        in: path
        required: true
        schema:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
          maxLength: 32

    get:
      tags: [Playlists]
      summary: Retrieve the **latest** revision of a playlist
      responses:
        '200':
          description: Playlist JSON
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Playlist' }
        '404':
          description: Playlist not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '406':
          description: Unsupported media type
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    put:
      tags: [Playlists]
      summary: Publish a new playlist revision
      security: [{ SignatureAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PublishEnvelope' }
      responses:
        '200':
          description: Revision persisted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Playlist' }
        '401':
          $ref: '#/components/responses/SigMismatch'
        '403':
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Playlist not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '406':
          description: Unsupported media type
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  #------------------------------#
  # 4.2  PLAYLIST-GROUP ENDPOINTS #
  #------------------------------#
  /playlist-groups:
    post:
      tags: [Playlist-Groups]
      summary: Create a new playlist-group (revision 1)
      security: [{ SignatureAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PublishEnvelope' }
      responses:
        '201':
          description: Playlist-group persisted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PlaylistGroup' }
        '401':
          $ref: '#/components/responses/SigMismatch'
        '403':
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '406':
          description: Unsupported media type
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /playlist-groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
          maxLength: 32

    get:
      tags: [Playlist-Groups]
      summary: Retrieve the **latest** revision of a playlist-group
      responses:
        '200':
          description: Playlist-group JSON
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PlaylistGroup' }
        '404':
          description: Playlist-group not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '406':
          description: Unsupported media type
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    put:
      tags: [Playlist-Groups]
      summary: Publish a new playlist-group revision
      security: [{ SignatureAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PublishEnvelope' }
      responses:
        '200':
          description: Revision persisted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PlaylistGroup' }
        '403':
          $ref: '#/components/responses/SigMismatch'
        '404':
          description: Playlist-group not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '406':
          description: Unsupported media type
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
